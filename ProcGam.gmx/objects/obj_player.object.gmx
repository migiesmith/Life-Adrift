<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>obj_health_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 1 / room_speed * 2;

dodgeDistance = 96;

goUp = true;


lastDirection = 0;

moveSpeed = 3;

dodgeX = x;
dodgeY = y;

alarm[0] = room_speed / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make stepping sound
if(STATE == WALKING){
    audio_play_sound(snd_step0, 10, false);
}

alarm[0] = room_speed / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial Movement code
event_inherited();

hspeed = (keyboard_check(vk_right) - keyboard_check(vk_left)) * moveSpeed;
vspeed = (keyboard_check(vk_down) - keyboard_check(vk_up)) * moveSpeed;

if(STATE != ATTACKING &amp;&amp; STATE != DODGING){
    if(hspeed != 0 || vspeed != 0){
        if(STATE == IDLE)
            alarm[0] = 1;
        STATE = WALKING;
    }else{
        STATE = IDLE;
    }
}else{
    hspeed = 0;
    vspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Non-Movement Input


if(keyboard_check_pressed(ord('X'))){
    var interact = instance_create(x + lengthdir_x(8, direction), y + lengthdir_y(8, direction), obj_interact);
    interact.image_angle = direction;
    STATE = IDLE;
    image_index = 1;
}

if(keyboard_check_pressed(ord('Z')) &amp;&amp; STATE != ATTACKING){
    var attack = instance_create(x, y, obj_attack);
    attack.user = id;
    attack.image_angle = direction;
    attack.damage = 25;
    attack.knockback = 32;
    image_index = 0;
    STATE = ATTACKING;
}

if(keyboard_check_pressed(vk_shift) &amp;&amp; STATE != DODGING){
    STATE = DODGING;
    dodgeX = x + lengthdir_x(dodgeDistance, direction);
    dodgeY = y + lengthdir_y(dodgeDistance, direction);
    audio_play_sound(snd_dodge, 10, false);
    image_index = 0;
}

if(keyboard_check_pressed(ord('H'))){
    if(room != rm_home){
        room_goto(rm_home);
    }
}else if(currHP &lt;= 0){
    room_goto(rm_home);
    currHP = maxHP;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State management


if(STATE == IDLE){
    sprite_index = sp_player_idle;
    image_speed = 1 / room_speed * 2;
    
}else if(STATE == WALKING){
    sprite_index = sp_player_walk;
    image_speed = 1 / room_speed * 7;
    
}else if(STATE == ATTACKING){
    sprite_index = sp_player_attack;
    image_speed = 1 / room_speed * 18;
    
    if(image_index &gt;= image_number - 0.5){
        STATE = IDLE;
    }
    
}else if(STATE == DODGING){
    sprite_index = sp_player_dodge;
    image_speed = 1 / room_speed * 24;
    if(point_distance(x, y, dodgeX, dodgeY) &gt; 8){
        invulnerable = true;
        var dir = point_direction(x, y, dodgeX, dodgeY);
        hspeed = lengthdir_x(moveSpeed * 2, dir);
        vspeed = lengthdir_y(moveSpeed * 2, dir);
    }else{
        STATE = IDLE;
        invulnerable = false;
    }
    
    if(place_meeting(x+hspeed, y+vspeed, obj_collidable)){
        STATE = IDLE;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update movement and graphics


if (place_meeting(x+hspeed,y,obj_collidable)) hspeed=0;
if (place_meeting(x,y+vspeed,obj_collidable)) vspeed=0;

if(bbox_left + hspeed &lt; 0 || bbox_right + hspeed &gt; room_width)
    hspeed = 0;
    
if(bbox_top + vspeed &lt; 0 || bbox_bottom + vspeed &gt; room_height)
    vspeed = 0;
    
if(hspeed &gt; 0){
    image_xscale = 1;
}else if(hspeed &lt; 0){
    image_xscale = -1;
}

if(hspeed == 0 &amp;&amp; vspeed == 0){
    direction = lastDirection;
}

lastDirection = direction;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
dodgeX = x;
dodgeY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//draw_sprite_ext(sp_player_health, 0, 0, 0, 2, 2, 0, c_white, 1);


var hpPercent = currHP / maxHP;

// Draw health loss
draw_sprite_part_ext(sp_player_health, 0,
                     sprite_get_width(sp_player_health) * hpPercent, 0,
                     sprite_get_width(sp_player_health) * (1.0 - hpPercent), sprite_get_height(sp_player_health),
                     20 + sprite_get_width(sp_player_health) * hpPercent * 2, 20,
                     2, 2,
                     c_white, 1
                    );
// Draw Remaining Health
draw_sprite_part_ext(sp_player_health, 1,
                     0, 0,
                     sprite_get_width(sp_player_health) * hpPercent + 1, sprite_get_height(sp_player_health),
                     20, 20,
                     2, 2,
                     c_white, 1
                     );
                     
                     
// Draw the join
var joinIndex = currHP % 12 div 4;
var joinStart = 0;
if(sprite_get_width(sp_player_health) * hpPercent * 2 &lt; sprite_get_width(sp_player_health_join)*2){
    joinStart = sprite_get_width(sp_player_health_join)*2 - sprite_get_width(sp_player_health) * hpPercent;
}

var joinEnd = sprite_get_width(sp_player_health_join);
if(sprite_get_width(sp_player_health) * hpPercent + sprite_get_width(sp_player_health_join) / 2 &gt; sprite_get_width(sp_player_health) - 8){
    joinEnd = -(sprite_get_width(sp_player_health) * hpPercent + sprite_get_width(sp_player_health_join) / 2 - (sprite_get_width(sp_player_health) - 8));
}
draw_sprite_part_ext(sp_player_health_join, joinIndex,
                     joinStart, 0,
                     joinEnd, sprite_get_height(sp_player_health),
                     20 + sprite_get_width(sp_player_health) * hpPercent * 2 - sprite_get_width(sp_player_health_join), 20,
                     2, 2,
                     c_white, 1
                     );
               
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
