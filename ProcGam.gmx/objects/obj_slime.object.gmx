<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_blue_slime</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 1 / room_speed * 2;

moveSpeed = 2;

leapX = 0;
leapY = 0;

isBusy = false;

canAttack = true;
attackDelay = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var attack = instance_create(x, y, obj_enemy_blob_attack);
attack.ignoreType = obj_enemy;
attack.knockback = 32;
attack.damage = 10;

if(STATE == ATTACKING)
    alarm[1] = room_speed/32;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canAttack = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(STATE != ATTACKING)
    isBusy = image_index div 1 == 0;

if(STATE == IDLE){
    sprite_index = sp_blue_slime;
        
}else if(STATE == WALKING){
    sprite_index = sp_blue_slime;
    image_speed = 1 / room_speed * 2;
    
}else if(STATE == ATTACKING){
    sprite_index = sp_blue_slime_attack;
    image_index = 0;
    
    if(point_distance(x, y, leapX, leapY) &gt; 8){
        var dir = point_direction(x, y, leapX, leapY);
        hspeed = lengthdir_x(moveSpeed * 2, dir);
        vspeed = lengthdir_y(moveSpeed * 2, dir);
    }else{
        STATE = IDLE;
        isBusy = false;
    }
    
    if(place_meeting(x+hspeed, y+vspeed, obj_collidable)){
        STATE = IDLE;
    }
    
}

if(canAttack){
    var player = instance_find(obj_player, 0);
    if(player != noone){
        var dist = point_distance(x, y, player.x, player.y);
        if(dist &lt; 32 * 2){
            STATE = ATTACKING;
            isBusy = true;
            var dir = point_direction(x, y, player.x, player.y);
            leapX = x + lengthdir_x(dist * 1.5, dir);
            leapY = y + lengthdir_y(dist * 1.5, dir);
            alarm[0] = room_speed * (attackDelay + random_range(-1, 2));
            canAttack = false;
            // Create Attack Areas
            alarm[1] = room_speed/16;
            audio_play_sound(snd_slime_attack, 10, false);
        }
    }
}


if (place_meeting(x+hspeed,y,obj_collidable)) hspeed=0;
if (place_meeting(x,y+vspeed,obj_collidable)) vspeed=0;

if(hspeed &gt; 0){
    image_xscale = 1;
}else if(hspeed &lt; 0){
    image_xscale = -1;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
