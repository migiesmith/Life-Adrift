<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_grass</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Randomly generate room
var roomManager = instance_find(obj_room_manager, 0);
var rooms = roomManager.rooms;
var r = rooms[roomManager.currRX, roomManager.currRY];
random_set_seed((roomManager.currRX+1) * (roomManager.currRY+1)
                + r[? 'right']
                + r[? 'down']
                + r[? 'left']
                + r[? 'up']
                + global.seed
                );
                
groundWidth = image_xscale;
groundHeight = image_yscale;

for(var yy = 0; yy &lt; groundHeight; yy++){
    for(var xx = 0; xx &lt; groundWidth; xx++){
        ground[xx, yy] = true;
    }
}

for(var i = 0; i &lt; 20; i ++){
    for(var yy = 0; yy &lt; groundHeight; yy++){
        for(var xx = 0; xx &lt; groundWidth; xx++){
            // Don't break the path
            if(xx &gt;= 4 &amp;&amp; xx &lt;= 8 || yy &gt;= 3 &amp;&amp; yy &lt;= 6)
                continue;
        
            // Sum up nearby
            var nearby = 8;
            for(var iy = -1; iy &lt; 2; iy++){
                for(var ix = -1; ix &lt; 2; ix++){
                    if(ix == 0 &amp;&amp; iy == 0) // Skip current
                        continue;
                    if(xx + ix &lt; 0 || xx + ix &gt;= groundWidth){ // Check x bounds
                        nearby--;
                    }else if(yy + iy &lt; 0 || yy + iy &gt;= groundHeight){ // Check y bounds
                        nearby--;
                    }else if(ground[xx + ix, yy + iy] == false){
                        nearby--;
                    }
                }
            }
            
            // Decay
            if(nearby &lt; 8 &amp;&amp; irandom(100) &lt; 8 - nearby){
                ground[xx, yy] = false;
            }
        }
    }
}

// Clean out unreachable tiles
for(var i = 0; i &lt; 4; i++){
    for(var yy = 0; yy &lt; groundHeight; yy++){
        for(var xx = 0; xx &lt; groundWidth; xx++){
            // Don't break the path
            if(xx &gt;= 4 &amp;&amp; xx &lt;= 8 || yy &gt;= 3 &amp;&amp; yy &lt;= 6)
                continue;
        
            // Sum up nearby
            var nearby = 4;
            for(var iy = -1; iy &lt; 2; iy++){
                for(var ix = -1; ix &lt; 2; ix++){
                    if(abs(ix) != 0 &amp;&amp; abs(iy) != 0) // Skip current
                        continue;
                    if(xx + ix &lt; 0 || xx + ix &gt;= groundWidth){ // Check x bounds
                        nearby--;
                    }else if(yy + iy &lt; 0 || yy + iy &gt;= groundHeight){ // Check y bounds
                        nearby--;
                    }else if(ground[xx + ix, yy + iy] == false){
                        nearby--;
                    }
                }
            }
            // Remove unreachable
            if(nearby &lt; 2){
                ground[xx, yy] = false;
            }
        }
    }
}

for(var yy = 0; yy &lt; groundHeight; yy++){
    for(var xx = 0; xx &lt; groundWidth; xx++){
        var right = !(xx+1 &gt;= image_xscale div 1 || !ground[xx+1, yy]);
        var down = !(yy+1 &gt;= image_yscale div 1 || !ground[xx, yy+1]);
        var left = !(xx-1 &lt; 0 || !ground[xx-1, yy]);
        var up = !(yy-1 &lt; 0 || !ground[xx, yy-1]);
                    
        if(!right &amp;&amp; ground[xx, yy]){ // right
            var tx = bbox_left + xx*32 + 48;
            var ty = bbox_top + yy*32 + 16;
            var inst = instance_create(tx, ty, obj_invisible_wall);  
            with(inst){
                if(place_meeting(x, y, obj_invisible_wall))
                    instance_destroy();
            }
        }
        if(!down &amp;&amp; ground[xx, yy]){ // down
            var tx = bbox_left + xx*32 + 16;
            var ty = bbox_top + yy*32 + 48;
            var inst = instance_create(tx, ty, obj_invisible_wall);  
            with(inst){
                if(place_meeting(x, y, obj_invisible_wall))
                    instance_destroy();
            }
        }            
        if(!up &amp;&amp; ground[xx, yy]){ // up
            var tx = bbox_left + xx*32 + 16;
            var ty = bbox_top + yy*32 - 16;
            var inst = instance_create(tx, ty, obj_invisible_wall);  
            with(inst){
                if(place_meeting(x, y, obj_invisible_wall))
                    instance_destroy();
            }
        }
        if(!left &amp;&amp; ground[xx, yy]){ // left
            var tx = bbox_left + xx*32 - 16;
            var ty = bbox_top + yy*32 + 16;
            var inst = instance_create(tx, ty, obj_invisible_wall);  
            with(inst){
                if(place_meeting(x, y, obj_invisible_wall))
                    instance_destroy();
            }
        }
    
    }
}

// Create surface for room
mySurface = createTiledSurface(bg_grass, 32, 32, ground);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface(mySurface, bbox_left, bbox_top);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
