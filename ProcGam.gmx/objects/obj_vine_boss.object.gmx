<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_vine_boss</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

initialDepth = -sprite_get_height(sp_pillar_boss_idle) div 4;

image_speed = 1 / room_speed * 2;

isBusy = true;
canKnockback = false;

canAttack = false;
attackDelay = 4;

STATE = SPAWNING;

maxHP = 1000;
currHP = maxHP;

solidBase = instance_create(x, y, obj_invisible_wall);
addObjectToGrid(global.pathingGrid, solidBase);
//mp_grid_add_cell(global.pathingGrid, solidBase.x div 16, solidBase.y div 16);

noVines = 4;
vineRotSpeed = 0.8;
for(var i = 0; i &lt; noVines; i++){
    vine[i] = instance_create(x, y, obj_vine);
    vine[i].image_angle = i * 360 / noVines;
    vine[i].rotSpeed = vineRotSpeed;
}
        
BOSS_STAGE = currHP div (maxHP div 8) - 1;

vineSize = 1;
vineRetract = true;

orbCount = 4;
orbChildren = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(solidBase){
    removeObjectFromGrid(global.pathingGrid);
    instance_destroy();    
}

for(var i = 0; i &lt; noVines; i++){
    if(instance_exists(vine[i])){
        with(vine[i])
            instance_destroy();
    }
}

instance_create(x, y, obj_loot);
instance_create(x, y, obj_loot);
instance_create(x, y, obj_loot);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>STATE = ATTACKING;
vineRetract = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(STATE == IDLE){


}else if(STATE == ATTACKING){
    
    if(vineRetract){
        if(vineSize &gt; 0){
            vineSize -= 1.0 / room_speed * 0.5;
            for(var i = 0; i &lt; noVines; i++){
                if(instance_exists(vine[i])){
                    vine[i].image_xscale = vineSize;
                }
            }
        }else{
            vineSize = 0;
            for(var i = 0; i &lt; orbCount; i++){
                var orb = instance_create(x, y, obj_vine_orb);
                orb.user = id;
                orb.ignoreType = obj_enemy;
                orb.moveDir = 360 / orbCount * i;
                orb.childCount = orbChildren;
            }
            vineRetract = false;
        }
    }else{
        if(vineSize &lt; 1){
            vineSize += 1.0 / room_speed * 0.5;
            for(var i = 0; i &lt; noVines; i++){
                if(instance_exists(vine[i])){
                    vine[i].image_xscale = vineSize;
                }
            }
        }else{
            vineSize = 1;
            STATE = IDLE;
            alarm[1] = room_speed * 8;
        }
    }
    
}

var hasVines = false;
for(var i = 0; i &lt; noVines; i++){
    if(instance_exists(vine[i]))
        hasVines = true;
}
if((currHP div (maxHP div 8) &lt; BOSS_STAGE || !hasVines) &amp;&amp; (alarm[1] &gt; room_speed || !canAttack)){
    alarm[1] = room_speed;
    canAttack = true;
}


if((currHP div (maxHP div 8) &lt; BOSS_STAGE || !hasVines) &amp;&amp; vineSize &lt; 0.1){
    // Spawn mobs
    alarm[0] = 1;
    BOSS_STAGE = currHP div (maxHP div 8);
    
    
    var oldVineCount = noVines;
    if(BOSS_STAGE &lt;= 2){
        noVines = 8;
        vineRotSpeed = 1;
        orbCount = 8;
        orbChildren = 3;
    }else if(BOSS_STAGE &lt;= 4){
        noVines = 6;
        vineRotSpeed = 0.9;
        orbCount = 6;
        orbChildren = 4;
    }else if(BOSS_STAGE &lt;= 6){
        alarm[1] = room_speed * 4;
        vineRotSpeed = 0.8;
        orbCount = 4;
        orbChildren = 2;
    }
    for(var i = 0; i &lt; noVines; i++){
        if(i &lt; oldVineCount &amp;&amp; vine[i] != noone){
            with(vine[i]){ instance_destroy(); }
        }
        vine[i] = instance_create(x, y, obj_vine);
        vine[i].image_angle = i * 360 / noVines;
        vine[i].image_xscale = vineSize;
        vine[i].rotSpeed = vineRotSpeed;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
