<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_skeleton_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 1 / room_speed * 2;

moveSpeed = 2;

dodgeDistance = 64;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

hspeed = 0;
vspeed = 0;

var player = instance_find(obj_player, 0);
if(player != noone){
    if(point_distance(x, y, player.x, player.y) &lt; 32 * 2 &amp;&amp; STATE != DODGING &amp;&amp; player.STATE == ATTACKING){
        STATE = DODGING;
        image_index = 0;
    }
}

if(STATE == IDLE){
    sprite_index = sp_skeleton_idle;
    image_speed = 1 / room_speed * 2;
    
}else if(STATE == DODGING){
    isBusy = true;
    isPathing = false;
    sprite_index = sp_skeleton_dodge;
    image_speed = 1 / room_speed * 6;
    if(image_index &gt;= image_number - 0.5){
        STATE = IDLE;
        isBusy = false;
        hspeed = 0;
    }else{
        var mvSpeed = max(floor(image_index - 1) / image_number, 0);
        if(mvSpeed != 0){
            var dir = point_direction(x, y, player.x, player.y);    
            hspeed = -lengthdir_x(dodgeDistance * mvSpeed * image_speed, dir);
            vspeed = -lengthdir_y(dodgeDistance * mvSpeed * image_speed, dir);
        }
    }
    
}else if(STATE == WALKING){
    sprite_index = sp_skeleton_walk;
    image_speed = 1 / room_speed * 6;
    
}

if (place_meeting(x+hspeed,y,obj_collidable)) hspeed=0;
if (place_meeting(x,y+vspeed,obj_collidable)) vspeed=0;

if(hspeed &gt; 0){
    image_xscale = 1;
}else if(hspeed &lt; 0){
    image_xscale = -1;
}

if(hspeed != 0 &amp;&amp; STATE == DODGING){
    image_xscale *= -1;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
